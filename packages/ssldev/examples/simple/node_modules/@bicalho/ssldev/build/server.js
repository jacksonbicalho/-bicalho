"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.server = exports.configServerDefault = void 0;
var node_https_1 = __importDefault(require("node:https"));
var serve_handler_1 = __importDefault(require("serve-handler"));
var custom_config_1 = require("@bicalho/custom-config");
var node_path_1 = __importDefault(require("node:path"));
var rootAppDefault = node_path_1.default.resolve(__dirname, '.');
var configDefault = {
    rootApp: rootAppDefault,
    publicDomain: "localhost",
    contenPublic: "example",
    webPort: 8081,
    keysPath: "ssl",
    renderSingle: false,
    cleanUrls: ["/**"],
    rewrites: [{ source: "app/**", destination: "/index.html" }],
};
var config = new custom_config_1.CustomConfig();
config.configure(configDefault);
exports.configServerDefault = config.getConfig();
var server = function (options, config) {
    return node_https_1.default.createServer(options, function (request, response) {
        // You pass two more arguments for config and middleware
        // More details here: https://github.com/vercel/serve-handler#options
        var renderSingle = config.renderSingle, cleanUrls = config.cleanUrls, contenPublic = config.contenPublic, rewrites = config.rewrites;
        return (0, serve_handler_1.default)(request, response, {
            renderSingle: renderSingle,
            cleanUrls: cleanUrls,
            public: contenPublic,
            rewrites: rewrites,
            headers: [
                {
                    source: "**/*.@(jpg|jpeg|gif|png)",
                    headers: [
                        {
                            key: "Cache-Control",
                            value: "max-age=7200",
                        },
                    ],
                },
            ],
        });
    });
};
exports.server = server;
