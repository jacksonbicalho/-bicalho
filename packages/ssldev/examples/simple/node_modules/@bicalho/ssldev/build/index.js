"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sslldev = void 0;
var path = __importStar(require("node:path"));
var fs = __importStar(require("node:fs"));
var server_1 = require("./server");
var SslDev = /** @class */ (function () {
    function SslDev(configServer) {
        this.configServer = configServer;
        this.configServer = configServer;
        return this;
    }
    SslDev.prototype.configure = function (configServer) {
        var currenConfig = this.configServer;
        this.configServer = __assign(__assign({}, currenConfig), configServer);
        return this;
    };
    ;
    SslDev.prototype.run = function () {
        var _a = this.configServer, rootApp = _a.rootApp, keysPath = _a.keysPath, publicDomain = _a.publicDomain, webPort = _a.webPort;
        var sslFiles = {
            key: path.resolve("".concat(rootApp), "".concat(keysPath), "".concat(publicDomain, ".key.pem")),
            cert: path.resolve("".concat(rootApp), "".concat(keysPath), "".concat(publicDomain, ".cert.pem")),
        };
        Object.entries(sslFiles).map(function (file) {
            if (!fs.existsSync(file[1])) {
                var reason = "\nfile not found!\n".concat(file[0], ": ").concat(file[1]);
                throw new Error(reason);
            }
        });
        var options = {
            key: fs.readFileSync(sslFiles.key),
            cert: fs.readFileSync(sslFiles.cert),
        };
        var bootstrap = (0, server_1.server)(options, this.configServer);
        bootstrap.listen(webPort, function () {
            console.log("Running at https://".concat(publicDomain, ":").concat(webPort));
        });
    };
    return SslDev;
}());
var sslldev = new SslDev(server_1.configServerDefault);
exports.sslldev = sslldev;
